name: Helm-nightly
on:
  schedule:
    - cron: '0 0 * * 6'
  workflow_dispatch:
  pull_request:
    types: [edited, ready_for_review, opened, synchronize, reopened]

jobs:
  testing:
    runs-on: ubuntu-latest
    name: deploy and test
    steps:
    - uses: actions/checkout@v2

    - name: Start minikube
      uses: medyagh/setup-minikube@latest

    - name: Try the cluster!
      run: kubectl get pods -A

    - name: Pull images
      run: |
        export SHELL=/bin/bash
        eval $(minikube -p minikube docker-env)
        docker pull cvat/server
        docker pull cvat/ui
        echo -n "verifying images:"
        docker images
    - uses: azure/setup-helm@v3
      with:
        version: 'v3.9.4'

    - name: Deploy to minikube
      run: |
        printf "traefik:\n  service:\n    externalIPs:\n      - $(minikube ip)\n" > helm-chart/values.override.yaml
        find cvat/apps/iam/rules -name "*.rego" -and ! -name '*test*' -exec basename {} \; | tar -czf helm-chart/rules.tar.gz -C cvat/apps/iam/rules/ -T -
        cd helm-chart
        helm dependency update
        cd ..
        helm upgrade -n default cvat -i --create-namespace helm-chart -f helm-chart/values.yaml -f helm-chart/values.override.yaml

    - name: Update test config
      run: |
        sed -i -e 's$http://localhost:8080$http://cvat.local:80$g' tests/python/shared/utils/config.py
        echo "$(minikube ip) cvat.local" | sudo tee -a /etc/hosts

    - name: Wait for CVAT to be ready
      run: |
        max_tries=30
        while [[ $(kubectl get pods -l component=server -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" && max_tries -gt 0 ]]; do echo "waiting for pod" && (( max_tries-- )) && sleep 5; done
        kubectl get pods

    - name: Generate schema
      run: |
        mkdir cvat-sdk/schema
        kubectl exec $(kubectl get pods -l component=server -o jsonpath='{.items[0].metadata.name}') -- /bin/bash -c "python manage.py spectacular --file /tmp/schema.yml"
        kubectl cp $(kubectl get pods -l component=server -o jsonpath='{.items[0].metadata.name}'):/tmp/schema.yml cvat-sdk/schema/schema.yml
        pip3 install --user -r cvat-sdk/gen/requirements.txt
        cd cvat-sdk/
        gen/generate.sh
        cd ..

    - name: Install test requrements
      run: |
        pip3 install --user cvat-sdk/
        pip3 install --user cvat-cli/
        pip3 install --user -r tests/python/requirements.txt

    - name: REST API and SDK tests
      run: |
        pytest --platform kube \
          tests/python/rest_api/test_auth.py \
          tests/python/rest_api/test_cache_policy.py \
          tests/python/rest_api/test_invitations.py \
          tests/python/rest_api/test_issues.py \
          tests/python/rest_api/test_projects.py \
          tests/python/cli/ \
          tests/python/sdk/test_client.py
