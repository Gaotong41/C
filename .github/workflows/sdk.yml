name: debug-sdk-tests
on:
  push:
    branches:
      - 'master'
      - 'develop'
  pull_request:
    types: [edited, ready_for_review, opened, synchronize, reopened]
    paths-ignore:
      - 'site/**'
      - '**/*.md'

jobs:
  search_cache:
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.get-sha.outputs.sha}}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REPO: ${{ github.repository }}
    steps:
      - name: Getting SHA with cache from the default branch
        id: get-sha
        run: |
          DEFAULT_BRANCH=$(gh api /repos/$REPO | jq -r '.default_branch')
          for sha in $(gh api "/repos/$REPO/commits?per_page=100&sha=$DEFAULT_BRANCH" | jq -r '.[].sha');
          do
            RUN_status=$(gh api /repos/${REPO}/actions/workflows/cache.yml/runs | \
              jq -r ".workflow_runs[]? | select((.head_sha == \"${sha}\") and (.conclusion == \"success\")) | .status")

            if [[ ${RUN_status} == "completed" ]]; then
              SHA=$sha
              break
            fi
          done

          echo Default branch is ${DEFAULT_BRANCH}
          echo Workflow will try to get cache from commit: ${SHA}

          echo ::set-output name=default_branch::${DEFAULT_BRANCH}
          echo ::set-output name=sha::${SHA}

  sdk_tests:
    needs: search_cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: CVAT server. Getting cache from the default branch
        uses: actions/cache@v3
        with:
          path: /tmp/cvat_cache_server
          key: ${{ runner.os }}-build-server-${{ needs.search_cache.outputs.sha }}

      - name: CVAT UI. Getting cache from the default branch
        uses: actions/cache@v3
        with:
          path: /tmp/cvat_cache_ui
          key: ${{ runner.os }}-build-ui-${{ needs.search_cache.outputs.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: CVAT server. Build and push
        uses: docker/build-push-action@v3
        with:
          cache-from: type=local,src=/tmp/cvat_cache_server
          context: .
          file: Dockerfile
          tags: cvat/server:dev
          load: true

      - name: CVAT UI. Build and push
        uses: docker/build-push-action@v3
        with:
          cache-from: type=local,src=/tmp/cvat_cache_ui
          context: .
          file: Dockerfile.ui
          tags: cvat/ui:dev
          load: true

      - name: CVAT SDK. Build
        run: |
          docker images
          docker run --rm -v ${PWD}/cvat-sdk/schema/:/transfer \
            --entrypoint /bin/bash -u root cvat/server \
            -c 'python manage.py spectacular --file /transfer/schema.yml'
          pip3 install --user -r cvat-sdk/gen/requirements.txt
          cd cvat-sdk/
          gen/generate.sh
          cd ..

      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Running REST API tests
        run: |
          pip3 install --user cvat-sdk/
          pip3 install --user -r tests/python/requirements.txt
          pytest tests/python/sdk

      - name: Creating a log file from cvat containers
        if: failure()
        env:
          LOGS_DIR: "${{ github.workspace }}/sdk_tests"
        run: |
            mkdir $LOGS_DIR
            docker logs test_cvat_server_1          > $LOGS_DIR/server.log
            docker logs test_cvat_worker_default_1  > $LOGS_DIR/worker_default.log
            docker logs test_cvat_worker_low_1      > $LOGS_DIR/worker_low.log
            docker logs test_cvat_worker_webhooks_1 > $LOGS_DIR/worker_webhooks.log
            docker logs test_cvat_opa_1            2> $LOGS_DIR/cvat_opa.log

      - name: Uploading "cvat" container logs as an artifact
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: container_logs
          path: "${{ github.workspace }}/sdk_tests"