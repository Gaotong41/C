[unix_http_server]
file = /tmp/supervisord/supervisor.sock

[supervisorctl]
serverurl = unix:///tmp/supervisord/supervisor.sock

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisord]
nodaemon=true
logfile=/dev/stdout
loglevel=info
logfile_maxbytes=0
pidfile=/tmp/supervisord/supervisord.pid

[program:ssh-agent]
command=bash -c "rm /tmp/ssh-agent.sock -f && /usr/bin/ssh-agent -d -a /tmp/ssh-agent.sock"
priority=1
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

[program:rqworker_default]
command=%(ENV_HOME)s/wait-for-it.sh %(ENV_REDIS_URL)s -t 0 -- bash -ic \
    "exec python3 ${HOME}/manage.py rqworker -v 3 default"
environment=SSH_AUTH_SOCK="/tmp/ssh-agent.sock"
numprocs=2
process_name=rqworker_default_%(process_num)s
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

[program:rqworker_low]
command=%(ENV_HOME)s/wait-for-it.sh %(ENV_REDIS_URL)s -t 0 -- bash -ic \
    "exec python3 ${HOME}/manage.py rqworker -v 3 low"
environment=SSH_AUTH_SOCK="/tmp/ssh-agent.sock"
numprocs=1
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

[program:git_status_updater]
command=%(ENV_HOME)s/wait-for-it.sh %(ENV_REDIS_URL)s -t 0 -- bash -ic \
    "python3 ${HOME}/manage.py update_git_states"
environment=SSH_AUTH_SOCK="/tmp/ssh-agent.sock"
numprocs=1
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

[program:rqscheduler]
command=%(ENV_HOME)s/wait-for-it.sh %(ENV_REDIS_URL)s -t 0 -- bash -ic \
    "python3 /opt/venv/bin/rqscheduler --url ${REDIS_URL} -i 30"
environment=SSH_AUTH_SOCK="/tmp/ssh-agent.sock"
numprocs=1
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

[program:runserver]
; Here need to run a couple of commands to initialize DB and copy static files.
; We cannot initialize DB on build because the DB should be online. Also some
; apps are dynamically loaded by an environment variable. It can lead to issues
; with docker cache. Thus it is necessary to run collectstatic here for such
; apps.
command=%(ENV_HOME)s/wait-for-it.sh %(ENV_DB_URL)s -t 0 -- bash -ic \
    "rm -f /tmp/cvat-server/httpd.pid && python3 ~/manage.py migrate && \
    python3 ~/manage.py collectstatic --no-input && \
    exec python3 ${HOME}/manage.py runmodwsgi --log-to-terminal --port 8000 \
    --limit-request-body 1073741824 --log-level INFO --include-file ~/mod_wsgi.conf \
    ${DJANGO_MODWSGI_EXTRA_ARGS} --locale ${LC_ALL} \
    --server-root /tmp/cvat-server"
environment=SSH_AUTH_SOCK="/tmp/ssh-agent.sock"
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

[program:proxy]
command=%(ENV_HOME)s/wait-for-it.sh localhost:8000 -t 0 -- bash -ic \
    "/usr/sbin/nginx -g 'daemon off;'"
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
